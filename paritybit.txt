#include <stdio.h>
#define MAX_SIZE 100

void add_parity_bits(int arr[], int n, int output[], int *outputSize) {
    int index = 0;

    for (int i = 0; i < n; i += 7) {
        int oneCount = 0;
        int parityIndex = index + 7;

        for (int j = 0; j < 7; j++) {
            output[index] = arr[i + j];
            if (arr[i + j] == 1) {
                oneCount++;
            }
            index++;
        }

        if (oneCount % 2 == 0) {
            output[parityIndex] = 0;
        } else {
            output[parityIndex] = 1;
        }
        index++;
    }

    *outputSize = n + (n / 7);
}

int verify_code_word(int output[], int outputSize) {
    for (int i = 0; i < outputSize; i += 8) {
        int oneCount = 0;

        for (int j = 0; j < 7; j++) {
            if (output[i + j] == 1) {
                oneCount++;
            }
        }

        int parityBit = output[i + 7];
        if (!((oneCount % 2 == 0 && parityBit == 0) || (oneCount % 2 != 0 && parityBit == 1))) {
            return 0; // Error detected
        }
    }
    return 1; // No errors
}

void print_data(int output[], int outputSize) {
    for (int i = 0; i < outputSize; i++) {
        printf("%d", output[i]);
        if ((i + 1) % 8 == 0) {
            printf(" "); 
        }
    }
    printf("\n");
}

int main() {
    int arr[MAX_SIZE], n;
    int output[MAX_SIZE];
    int outputSize;
    int erroredOutput[MAX_SIZE];

    printf("Enter the number of bits (multiple of 7): ");
    scanf("%d", &n);

    if (n % 7 != 0) {
        printf("The number of bits must be a multiple of 7.\n");
        return 1;
    }

    printf("Enter the elements (0 or 1):\n");
    for (int i = 0; i < n; i++) {
        printf("Enter element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }

    add_parity_bits(arr, n, output, &outputSize);

    printf("Sender: After adding parity bits:\n");
    print_data(output, outputSize);

    printf("Receiver: After verifying parity bits:\n");
    if (verify_code_word(output, outputSize)) {
        for (int i = 0; i < outputSize; i++) {
            if ((i + 1) % 8 != 0) {
                printf("%d", output[i]);
            }
            if ((i + 1) % 8 == 0) {
                printf(" ");
            }
        }
        printf("\n");
    } else {
        printf("Error\n");
    }

    // Get errored stuffed word as input
    printf("Enter the errored stuffed word (%d bits):\n", outputSize);
    for (int i = 0; i < outputSize; i++) {
        printf("Enter element %d: ", i + 1);
        scanf("%d", &erroredOutput[i]);
    }

    // Verify and print the errored stuffed word
    printf("Receiver: After verifying parity bits of errored stuffed word:\n");
    if (verify_code_word(erroredOutput, outputSize)) {
        for (int i = 0; i < outputSize; i++) {
            if ((i + 1) % 8 != 0) {
                printf("%d", erroredOutput[i]);
            }
            if ((i + 1) % 8 == 0) {
                printf(" ");
            }
        }
        printf("\n");
    } else {
        printf("Error\n");
    }

    return 0;
}
